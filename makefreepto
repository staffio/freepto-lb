#!/bin/bash
#set -x

usage() {
cat <<EOF

$0 [ -b ] [ -r ] [-f file_system_type ] [ -s ] [ -p luks_password ] [ -i image_path ] DEVICE

Options:
    -b         skip badblocks check
    -r         skip random filling (use only if you know what you are doing)
    -R DEV     use DEV as random source instead of urandom (i.e.: /dev/frandom)
    -i IMAGE   put IMAGE on DEVICE (default is binary.img)
    -p         set password (defaul is "freepto")
    -s         set secure random password (default is "freepto")
    -f         set filesystem type: ext4 or btrfs (with lzo) (default is "ext4")

Example:
    sudo ./makefreepto -f ext4 -i freepto-lb_vX.X.X.img -p password /dev/sdX

EOF
}

# set color:
export LRED="\e[1;31m"
export LGREEN="\e[1;32m"
export Z="\e[0m"

# check if user is root:
if [ "$(id -u)" != "0" ]; then
   echo -e "$LRED[-] Only root can do that! $Z" 1>&2
   exit 1
fi

# set default:
skip_badblocks=0
skip_random=0
password="freepto"
random_device="${random_device:-/dev/urandom}"
img=binary.img
log="./makefreepto.log"
fs="ext4"

while getopts 'brf:R:p:si:' opt; do
    case $opt in
    b)
        skip_badblocks=1
        ;;
    r)
        skip_random=1
        ;;
    f)  
        fs=$OPTARG
        ;;
    i)
        img=$OPTARG
        ;;
    p)
        password=$OPTARG
        ;;
    R)
        random_device=$OPTARG
	;;
    s)
        password=`tr -dc 'a-zA-H0-9' < "${random_device}" | head -c 12`
        echo -e "$LGREEN[+]$Z Your LUKS random passphrase is: $LRED$password$Z"
        ;;
    \?)
        echo -e "$LRED[-] Invalid option: -$OPTARG $Z" >&2
        usage
        exit 1
        ;;
    esac
done
shift $((OPTIND-1))

# some control check
if ! [[ -f "$img" ]]; then
    echo -e "$LRED[-] Image $img not exist or is not valid $Z"
    exit 1
fi

if [ $# != 1 ];then
    echo -e "$LRED[-] Wrong argument number $Z"
    usage
    exit 1
fi

if ! [[ -b $1 ]]; then
    echo -e "$LRED[-]$1 should be a block special device $Z"
    usage
    exit 1
fi
if [ "${random_device}" != /dev/urandom ]; then
	echo "ATTENZIONE: STAI USANDO UN GENERATORE RANDOM ERETICO" ${random_device}
fi


# set device
device=$1

# check dependencies
if ! which mkfs.btrfs &> /dev/null; then
     echo -e "$LRED[-] No btrfs. Setting up btrfs-tools $Z"
     sudo apt-get --force-yes --yes install btrfs-tools >> $log 2>&1
     echo -e "$LGREEN[+] $Z btrfs-tools package installed!"
fi
if ! which cryptsetup &> /dev/null; then
     echo -e "$LRED[-] No cryptsetup. Setting up cryptsetup $Z"
     sudo apt-get --force-yes --yes install cryptsetup >> $log 2>&1
     echo -e "$LGREEN[+]$Z cryptsetup pakcage installed!"
fi
if ! which parted &> /dev/null; then
     echo -e "$LRED[-] No parted. Setting up parted $Z"
     sudo apt-get --force-yes --yes install parted >> $log 2>&1
     echo -e "$LGREEN[+]$Z parted pakcage installed!"
fi

# umount device and clean all partition:
if mount | grep -q "${device}1"; then
     echo -e "$LGREEN[+]$Z Umount device ${device}1"
     umount "${device}1" > $log 2>&1
fi
if mount | grep -q "${device}2"; then
     echo -e "$LGREEN[+]$Z Umount device ${device}2"
     umount "${device}2" > $log 2>&1
fi

# check for bad block on the device:
if [[ $skip_badblocks -eq 0 ]]; then
    echo -e "$LGREEN[+]$Z Badblock check started..."
    badblocks -c 10240 -s -w -v "${device}"
    echo -e "$LGREEN[+]$Z Badblock check completed!"
fi

# write random data on crypto partition:
if [[ $skip_random -eq 0 ]]; then
    echo -e "$LGREEN[+]$Z Writing random data on crypto partition!"
    dd "if=${random_device}" of="${device}2"
    echo -e "$LGREEN[+]$Z Random writing completed!"
fi

# copy binay image with dd:
echo -e "$LGREEN[+]$Z Starting copy"
dd "if=$img" of="${device}" &
ddpid=$!
echo " with PID $ddpid"
totchar=$(stat -c '%s' "$img")
humansize=$(du -h "$img" | cut -f1)
while kill -0 $ddpid; do
    wchar=$(egrep '^wchar:' /proc/$ddpid/io | awk '{ print $2 }')
    echo -en "\rWriting $humansize: $((wchar * 100 / totchar))%"
    sleep 10
done
wait
echo -e "$LGREEN[+]$Z Completed!"

# make the partition:
echo -e "$LGREEN[+]$Z Make encrypted persistent partition"
img_bytes=$(stat -c %s "$img")
img_bytes=$((img_bytes+1))

partprobe 
parted "${device}" -- mkpart primary "${img_bytes}B" -1
partprobe 

# encrypt partition
cryptsetup --verbose --batch-mode --key-size 512 --hash sha512 --cipher aes-xts-plain --use-random luksFormat "${device}2" <<<${password} || exit 1

# open LUKS
cryptsetup luksOpen "${device}2" my_usb.$$ <<<${password} || exit 1

if [[ $fs == "btrfs" ]]; then
    # make FS with label: "persistence"
    mkfs.btrfs -L persistence /dev/mapper/my_usb.$$ >> $log 2>&1 || exit 1
    # make a mount point
    mkdir -p /mnt/freepto.$$
    # mount the partition
    mount /dev/mapper/my_usb.$$ /mnt/freepto.$$/ -o noatime,nodiratime,compress=lzo
elif [[ $fs == "ext4" ]]; then
    # make FS with label: "persistence"
    mkfs.ext4 -L persistence /dev/mapper/my_usb.$$ >> $log 2>&1 || exit 1
    # make a mount point
    mkdir -p /mnt/freepto.$$
    # mount the partition
    mount /dev/mapper/my_usb.$$ /mnt/freepto.$$/ -o noatime,nodiratime
fi

# make the persistence.conf file
sleep 5
echo "/ union" > /mnt/freepto.$$/persistence.conf

# umount partition and close LUKS
sleep 5
umount /mnt/freepto.$$ >> $log 2>&1 && cryptsetup luksClose /dev/mapper/my_usb.$$ >> $log 2>&1

# remove mount dir
rm -rf /mnt/freepto.$$ >> $log 2>&1

# stop
echo -e "$LGREEN[+]$Z Freepto is ready for use"

# vim: set ts=4 sw=4 et:
